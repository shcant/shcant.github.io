<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Critique of Pure Reason and Feeling</title>
    <link>https://shcant.github.io/post/</link>
    <description>Recent content in Posts on The Critique of Pure Reason and Feeling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright © 2020, YinShuhao; all rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Jun 2019 20:21:10 +0800</lastBuildDate>
    
	<atom:link href="https://shcant.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Google File System 论文</title>
      <link>https://shcant.github.io/2019/06/google-file-system/</link>
      <pubDate>Thu, 20 Jun 2019 20:21:10 +0800</pubDate>
      
      <guid>https://shcant.github.io/2019/06/google-file-system/</guid>
      <description>推荐最近看到的一本 OceanBase 大佬写的书1，还有这篇文章2，配合论文会更有收获。本书虽是 13 年写的，但对于许多主流的技术均有涉及，作者本人的功力也是非常深厚的。
 在论文摘要部分中给出了 GFS 的 4 个决策依据：
 组件的失败是频繁的。包括磁盘、内存、网络、系统，甚至人为因素。计算机是不可信的。 文件系统中的文件很大（GB 以上）。这一点决定了之后的一些设计决策，比如块的大小。对于谷歌而言，这是非常自然的，因为谷歌的搜索依赖于倒排索引，数量非常巨大。不过，这个假设时至今日已经不再有力，所以不论是谷歌还是阿里都有自己支持小文件的分布式文件系统。 大部分文件都是追加而非修改操作。不存在随机的数据写入。这个假设熟悉 HDFS 的人应该都不陌生。这实际上是数据仓库的基本条件之一。 应用程序和文件系统 API 的协同设计提高了整个系统的灵活性。这个我觉得指的是 GFS 使用了比较弱的一致性模型，所以应用程序不需要做很多复杂的操作，比如加锁。  Architecture GFS 的架构很简单，但它不是通常意义上的主从结构，而是 master 和 chunkserver，也就是存储元数据和文件数据的两种服务器。这里虽然论文中用了 single 这个词，但 master 是有 replication 机制的。
 The master maintains all file system metadata. This includes the namespace, access control information, the mapping from files to chunks, and the current locations of chunks. It also controls system-wide activities such as chunklease management, garbage collection of orphaned chunks, and chunkmigration between chunkservers.</description>
    </item>
    
    <item>
      <title>如何调试 Typescript 源代码</title>
      <link>https://shcant.github.io/2018/03/typescript-debug/</link>
      <pubDate>Sat, 03 Mar 2018 22:32:16 +0800</pubDate>
      
      <guid>https://shcant.github.io/2018/03/typescript-debug/</guid>
      <description>最近在学习TypeScript，所以从 Github 上把项目扒了下来准备观摩一下。虽然调试的时候遇到了一些小麻烦，不过TypeScript的文档已经算是维护的相当好了。调试主要参考：
https://github.com/Microsoft/TypeScript/wiki/Debugging-Language-Service-in-VS-Code
说到 Language Service，这是一个比较有趣的概念。传统的编译器结构针对的是已经完成的合法代码，而在现代的 IDE 中包含了诸如重构、提示等各种针对未完成输入的功能，这导致了二者架构的分离。Language Service 把编译器分成了 C/S 的架构。在 Channel9 有一个 Anders Hejlsberg 简述现代编译器是如何集成这些功能的视频。这个人有多厉害微软粉们都知道，在 90 年代就被盖茨 300w 美金的年薪挖角，主导了C#编译器的设计……这应该就是做技术的最高境界了吧。这个视频作为想了解这些 IDE 功能是如何实现的程序员来说是个不错的引子。
Anders Hejlsberg 其实首先在Rosyln，也就是最新一代的C#编译器上实现了上述的大一统。这里就引出另一个和 TypeScript 相似的项目OmniSharp，但是知名度和TypeScript就逊色许多。C#日薄西山啊(:з)∠)_。
因为 Language Service 一分为二，Client 和 Server 端的调试方式不同。首先在 Github 上克隆TypeScript的代码至本地并安装依赖的包。
1npm install TypeScript可以使用gulp构建：
1gulp local # Build the compiler into built/local 2gulp clean # Delete the built compiler 3gulp help # List the above commands 还有其他例如测试相关的命令可以通过gulp help查看。考虑到文档的滞后性这里就不一一列出了。
standalone mode 如果是调试独立编译器（Standalone compiler）的话，其实和调试其他TypeScript代码是完全相似的，只需要设置sourceMap即可。不过这里就遇到了我的第一个问题——build 生成的*.js.map文件不正确。虽然这个问题已经在文档里清晰的提及并链接到了对应的issue，而且还有了替代方案jake，但是为什么没有得到解决我还是很好奇的（姑且认为是gulp的锅了）。</description>
    </item>
    
  </channel>
</rss>